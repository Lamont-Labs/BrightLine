# FILE: .github/workflows/ci.yml
name: BrightLine CI

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  build-and-verify:
    name: üß± Build & Verify Demo
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      # --- Option 3: Fallback generator for requirements.txt ---
      - name: Ensure requirements.txt exists
        shell: bash
        run: |
          if [ ! -f requirements.txt ]; then
            echo "‚ö†Ô∏è requirements.txt missing ‚Äî generating fallback..."
            cat > requirements.txt <<'REQS'
fastapi==0.111.0
uvicorn==0.30.0
pydantic==2.8.2
pytest==8.3.2
requests==2.32.3
aiofiles==24.1.0
python-multipart==0.0.9
jsonschema==4.22.0
REQS
          fi
          echo "----- requirements.txt -----"
          cat requirements.txt
          echo "----------------------------"

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # --- Non-fatal linting so demo continues even with style issues ---
      - name: Lint Markdown & YAML (non-fatal)
        shell: bash
        run: |
          pip install mdformat yamllint
          mdformat --check . || echo "‚ö†Ô∏è Markdown lint warnings ignored for demo"
          yamllint . || echo "‚ö†Ô∏è YAML lint warnings ignored for demo"

      - name: Run Unit Tests
        env:
          PYTHONPATH: .
        run: |
          pytest -q --tb=short

      - name: Verify Determinism (repo script)
        shell: bash
        run: |
          if [ -x "./verify.sh" ]; then
            bash ./verify.sh
          else
            echo "‚ö†Ô∏è verify.sh not executable or missing; creating minimal deterministic check."
            mkdir -p SBOM
            find . -type f -name "*.py" -o -name "*.md" | sort | xargs sha256sum > SBOM/checksums.csv
            jq -n --arg v "v2.0" --arg t "$(date -u +%FT%TZ)" '{project:"BrightLine",version:$v,generated_at:$t,commit:"demo-seed"}' > SBOM/provenance.json
          fi

      # --- Provenance integrity check: compare to golden if present, else create it ---
      - name: Provenance Integrity Check
        shell: bash
        run: |
          set -e
          mkdir -p SBOM provenance
          if command -v sha256sum >/dev/null 2>&1; then SHACMD="sha256sum"; else SHACMD="shasum -a 256"; fi
          # Hash a stable set of files for reproducibility
          (git ls-files | grep -E '\.(py|md|yml|yaml)$' | sort | xargs $SHACMD) > SBOM/checksums.csv
          echo "Computed checksums:"
          head -n 10 SBOM/checksums.csv || true

          GOLD="provenance/golden_checksums.csv"
          if [ -f "$GOLD" ]; then
            echo "Golden checksums found ‚Üí comparing‚Ä¶"
            diff -u "$GOLD" SBOM/checksums.csv && echo "‚úÖ Checksums match golden."
          else
            echo "‚ö†Ô∏è No golden checksums present; saving current as golden (non-fatal)."
            mkdir -p provenance
            cp SBOM/checksums.csv "$GOLD"
          fi

      - name: Generate SBOM (placeholder)
        run: |
          mkdir -p SBOM
          echo '{"bomFormat":"CycloneDX","specVersion":"1.5"}' > SBOM/sbom.cdx.json

      - name: Upload Provenance Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: provenance-artifacts
          path: |
            SBOM/
            provenance/
          if-no-files-found: warn

  security-scan:
    name: üîí Security Scan
    runs-on: ubuntu-latest
    needs: build-and-verify
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install Security Tools
        run: |
          python -m pip install --upgrade pip
          pip install pip-audit safety

      - name: Run Dependency Scan (non-fatal for demo)
        shell: bash
        run: |
          pip-audit || echo "‚ö†Ô∏è pip-audit findings recorded (non-fatal for demo)"
          safety check || echo "‚ö†Ô∏è safety findings recorded (non-fatal for demo)"

      - name: Upload Security Reports
        uses: actions/upload-artifact@v4
        with:
          name: security-reports
          path: .
